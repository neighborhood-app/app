generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Gender {
  id    Int     @id @default(autoincrement())
  name  String? @db.VarChar(10)
  users User[]

  @@map("genders")
}

model Neighborhood {
  id          Int       @id @default(autoincrement())
  admin_id    Int
  name        String    @unique @db.VarChar(30)
  description String?   @db.VarChar(400)
  location    Json?
  admin       User      @relation("admin", fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  users       User[]
  requests    Request[]

  @@map("neighborhoods")
}

model Request {
  id              Int           @id @default(autoincrement())
  neighborhood_id Int
  user_id         Int
  title           String        @db.VarChar(50)
  content         String        @db.VarChar(1000)
  status          RequestStatus @default(OPEN)
  time_created    DateTime      @default(now()) @db.Timestamptz(6)
  neighborhood    Neighborhood  @relation(fields: [neighborhood_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            User          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  responses       Response[]

  @@map("requests")
}

model Response {
  id           Int            @id @default(autoincrement())
  request_id   Int
  user_id      Int
  content      String         @db.VarChar(1000)
  status       ResponseStatus @default(PENDING)
  time_created DateTime       @default(now()) @db.Timestamptz(6)
  request      Request        @relation(fields: [request_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("responses")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String         @unique @db.VarChar(25)
  email         String         @unique
  password_hash String         @db.VarChar(100)
  first_name    String?        @db.VarChar(25)
  last_name     String?        @db.VarChar(25)
  dob           DateTime?      @db.Date
  gender_id     Int?
  bio           String?        @db.VarChar(500)
  adminOf       Neighborhood[] @relation("admin")
  neighborhoods Neighborhood[]
  requests      Request[]
  responses     Response[]
  gender        Gender?        @relation(fields: [gender_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_gender_fkey")

  @@map("users")
}

enum RequestStatus {
  OPEN
  CLOSED
  INACTIVE
}

enum ResponseStatus {
  PENDING
  ACCEPTED
  INACTIVE
}
